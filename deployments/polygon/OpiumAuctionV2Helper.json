{
  "address": "0x06eb4bCc14b8C1664a2d4e2CdE8fA2F992332fCd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feesReceiver_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNonce",
          "type": "uint256"
        }
      ],
      "name": "NonceIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "advanceNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "secs",
          "type": "uint256"
        }
      ],
      "name": "expBySeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdOrderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amplifier",
          "type": "uint256"
        }
      ],
      "name": "exponentialPriceDecreasing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdOrderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amplifier",
          "type": "uint256"
        }
      ],
      "name": "exponentialPriceIncreasing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdOrderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "increasing",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amplifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapTakerAmount",
          "type": "uint256"
        }
      ],
      "name": "getExponentialAuctionMakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdOrderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "increasing",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amplifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapMakerAmount",
          "type": "uint256"
        }
      ],
      "name": "getExponentialAuctionTakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdOrderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "increasing",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "swapTakerAmount",
          "type": "uint256"
        }
      ],
      "name": "getLinearAuctionMakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdOrderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "increasing",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "swapMakerAmount",
          "type": "uint256"
        }
      ],
      "name": "getLinearAuctionTakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdOrderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAt",
          "type": "uint256"
        }
      ],
      "name": "linearPriceDecreasing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdOrderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAt",
          "type": "uint256"
        }
      ],
      "name": "linearPriceIncreasing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "makerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "makerNonce",
          "type": "uint256"
        }
      ],
      "name": "nonceEquals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "takerAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "makingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "interactiveData",
          "type": "bytes"
        }
      ],
      "name": "notifyFillOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feesReceiver_",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "timestampAbove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "timestampBelow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e187b4cff3d909854df6234cee8714942f19a42c85a7b6c597ef826e78b008f",
  "receipt": {
    "to": null,
    "from": "0xd8166138Eda6dEFD2Bf2403d7637F41CE01C4BbE",
    "contractAddress": "0x06eb4bCc14b8C1664a2d4e2CdE8fA2F992332fCd",
    "transactionIndex": 84,
    "gasUsed": "1311176",
    "logsBloom": "0x
    "blockHash": "0xf1420911f66ac547fa47396a62362e793ae0bd577ebc705ce11b6db17628c36b",
    "transactionHash": "0x3e187b4cff3d909854df6234cee8714942f19a42c85a7b6c597ef826e78b008f",
    "logs": [
      {
        "transactionIndex": 84,
        "blockNumber": 36821199,
        "transactionHash": "0x3e187b4cff3d909854df6234cee8714942f19a42c85a7b6c597ef826e78b008f",
        "address": "0x06eb4bCc14b8C1664a2d4e2CdE8fA2F992332fCd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe"
        ],
        "data": "0x",
        "logIndex": 287,
        "blockHash": "0xf1420911f66ac547fa47396a62362e793ae0bd577ebc705ce11b6db17628c36b"
      },
      {
        "transactionIndex": 84,
        "blockNumber": 36821199,
        "transactionHash": "0x3e187b4cff3d909854df6234cee8714942f19a42c85a7b6c597ef826e78b008f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d8166138eda6defd2bf2403d7637f41ce01c4bbe",
          "0x00000000000000000000000046a3a41bd932244dd08186e4c19f1a7e48cbcdf4"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a6d68e2ace7420000000000000000000000000000000000000000000000000ca9f3d934fd5eb7000000000000000000000000000000000000000000000021bc439b0e1611b81de000000000000000000000000000000000000000000000000c9f867052507775000000000000000000000000000000000000000000000021bc4e0876f8be9f5fe",
        "logIndex": 288,
        "blockHash": "0xf1420911f66ac547fa47396a62362e793ae0bd577ebc705ce11b6db17628c36b"
      }
    ],
    "blockNumber": 36821199,
    "cumulativeGasUsed": "12038570",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd8166138Eda6dEFD2Bf2403d7637F41CE01C4BbE"
  ],
  "numDeployments": 1,
  "solcInputHash": "9eb894df12d3e1e3b24d557be6880e4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feesReceiver_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"NonceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"advanceNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"expBySeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdOrderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amplifier\",\"type\":\"uint256\"}],\"name\":\"exponentialPriceDecreasing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdOrderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amplifier\",\"type\":\"uint256\"}],\"name\":\"exponentialPriceIncreasing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdOrderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increasing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amplifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTakerAmount\",\"type\":\"uint256\"}],\"name\":\"getExponentialAuctionMakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdOrderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increasing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amplifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapMakerAmount\",\"type\":\"uint256\"}],\"name\":\"getExponentialAuctionTakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdOrderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increasing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapTakerAmount\",\"type\":\"uint256\"}],\"name\":\"getLinearAuctionMakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdOrderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increasing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapMakerAmount\",\"type\":\"uint256\"}],\"name\":\"getLinearAuctionTakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdOrderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"}],\"name\":\"linearPriceDecreasing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdOrderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"}],\"name\":\"linearPriceIncreasing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerNonce\",\"type\":\"uint256\"}],\"name\":\"nonceEquals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactiveData\",\"type\":\"bytes\"}],\"name\":\"notifyFillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feesReceiver_\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"timestampAbove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"timestampBelow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"nonceEquals(address,uint256)\":{\"returns\":{\"_0\":\"Result True if `makerAddress` has specified nonce. Otherwise, false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"advanceNonce(uint8)\":{\"notice\":\"Advances nonce by specified amount\"},\"increaseNonce()\":{\"notice\":\"Advances nonce by one\"},\"nonceEquals(address,uint256)\":{\"notice\":\"Checks if `makerAddress` has specified `makerNonce`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpiumAuctionV2Helper.sol\":\"OpiumAuctionV2Helper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ExponentialAuction.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LinearAuction.sol\\\";\\n\\ncontract ExponentialAuction is LinearAuction {\\n  function expBySeconds(uint256 secs) public pure returns(uint256 result) {\\n    result = BASE;\\n    assembly { // solhint-disable-line no-inline-assembly\\n      if and(secs, 0x00000F) {\\n        if and(secs, 0x000001) {\\n          result := div(mul(result, 999900000000000000000000000000000000), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x000002) {\\n          result := div(mul(result, 999800010000000000000000000000000000), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x000004) {\\n          result := div(mul(result, 999600059996000100000000000000000000), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x000008) {\\n          result := div(mul(result, 999200279944006999440027999200010000), 1000000000000000000000000000000000000)\\n        }\\n      }\\n\\n      if and(secs, 0x0000F0) {\\n        if and(secs, 0x000010) {\\n          result := div(mul(result, 998401199440181956328006856128688560), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x000020) {\\n          result := div(mul(result, 996804955043593987145855519554957648), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x000040) {\\n          result := div(mul(result, 993620118399461429792290614928235372), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x000080) {\\n          result := div(mul(result, 987280939688159750172898466482272707), 1000000000000000000000000000000000000)\\n        }\\n      }\\n\\n      if and(secs, 0x000F00) {\\n        if and(secs, 0x000100) {\\n          result := div(mul(result, 974723653871535730138973062438582481), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x000200) {\\n          result := div(mul(result, 950086201416677390961738571086337286), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x000400) {\\n          result := div(mul(result, 902663790122371280016479918855854806), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x000800) {\\n          result := div(mul(result, 814801917998084346828628782199508463), 1000000000000000000000000000000000000)\\n        }\\n      }\\n\\n      if and(secs, 0x00F000) {\\n        if and(secs, 0x001000) {\\n          result := div(mul(result, 663902165573356968243491567819400493), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x002000) {\\n          result := div(mul(result, 440766085452993090398118811102456830), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x004000) {\\n          result := div(mul(result, 194274742085555207178862579417407102), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x008000) {\\n          result := div(mul(result, 37742675412408995610179844414960649), 1000000000000000000000000000000000000)\\n        }\\n      }\\n\\n      if and(secs, 0x0F0000) {\\n        if and(secs, 0x010000) {\\n          result := div(mul(result, 1424509547286462546864068778806188), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x020000) {\\n          result := div(mul(result, 2029227450310282474813662564103), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x040000) {\\n          result := div(mul(result, 4117764045092769930387910), 1000000000000000000000000000000000000)\\n        }\\n        if and(secs, 0x080000) {\\n          result := div(mul(result, 16955980731058), 1000000000000000000000000000000000000)\\n        }\\n      }\\n    }\\n  }\\n\\n  function exponentialPriceDecreasing(\\n    uint256 orderMakerAmount,\\n    uint256 orderTakerAmount,\\n    uint256 thresholdOrderTakerAmount,\\n    uint256 startedAt,\\n    uint256 endedAt,\\n    uint256 amplifier\\n  ) public view returns(uint256) {\\n    uint256 maxPricePadded = orderTakerAmount * BASE / orderMakerAmount;\\n    uint256 minPricePadded = thresholdOrderTakerAmount * BASE / orderMakerAmount;\\n\\n    // If not started yet\\n    if (startedAt > block.timestamp) {\\n      return maxPricePadded;\\n    }\\n\\n    // If already finished\\n    if (endedAt < block.timestamp) {\\n      return minPricePadded;\\n    }\\n\\n    uint256 timeElapsed = block.timestamp - startedAt;\\n    uint256 pricePadded = maxPricePadded * expBySeconds(timeElapsed * amplifier) / BASE;\\n\\n    return pricePadded > minPricePadded ? pricePadded : minPricePadded;\\n  }\\n\\n  function exponentialPriceIncreasing(\\n    uint256 orderMakerAmount,\\n    uint256 orderTakerAmount,\\n    uint256 thresholdOrderTakerAmount,\\n    uint256 startedAt,\\n    uint256 endedAt,\\n    uint256 amplifier\\n  ) public view returns(uint256) {\\n    uint256 maxPricePadded = orderTakerAmount * BASE / orderMakerAmount;\\n    uint256 minPricePadded = thresholdOrderTakerAmount * BASE / orderMakerAmount;\\n\\n    // If not started yet\\n    if (startedAt > block.timestamp) {\\n      return minPricePadded;\\n    }\\n\\n    // If already finished\\n    if (endedAt < block.timestamp) {\\n      return maxPricePadded;\\n    }\\n\\n    uint256 timeElapsed = block.timestamp - startedAt;\\n    uint256 pricePadded = maxPricePadded * (BASE - expBySeconds(timeElapsed * amplifier)) / BASE;\\n\\n    return pricePadded > minPricePadded ? pricePadded : minPricePadded;\\n  }\\n\\n  function getExponentialAuctionMakerAmount(\\n    uint256 orderMakerAmount,\\n    uint256 orderTakerAmount,\\n    uint256 thresholdOrderTakerAmount,\\n    uint256 startedAt,\\n    uint256 endedAt,\\n    bool increasing,\\n    uint256 amplifier,\\n    uint256 swapTakerAmount\\n  ) public view returns(uint256) {\\n    return \\n      swapTakerAmount\\n      * BASE\\n      / (\\n        increasing\\n        ? exponentialPriceIncreasing(\\n          orderMakerAmount,\\n          orderTakerAmount,\\n          thresholdOrderTakerAmount,\\n          startedAt,\\n          endedAt,\\n          amplifier\\n        )\\n        : exponentialPriceDecreasing(\\n          orderMakerAmount,\\n          orderTakerAmount,\\n          thresholdOrderTakerAmount,\\n          startedAt,\\n          endedAt,\\n          amplifier\\n        )\\n      );\\n  }\\n\\n  function getExponentialAuctionTakerAmount(\\n    uint256 orderMakerAmount,\\n    uint256 orderTakerAmount,\\n    uint256 thresholdOrderTakerAmount,\\n    uint256 startedAt,\\n    uint256 endedAt,\\n    bool increasing,\\n    uint256 amplifier,\\n    uint256 swapMakerAmount\\n  ) public view returns(uint256) {\\n    return \\n      swapMakerAmount \\n      * (\\n        increasing\\n        ? exponentialPriceIncreasing(\\n          orderMakerAmount,\\n          orderTakerAmount,\\n          thresholdOrderTakerAmount,\\n          startedAt,\\n          endedAt,\\n          amplifier\\n        )\\n        : exponentialPriceDecreasing(\\n          orderMakerAmount,\\n          orderTakerAmount,\\n          thresholdOrderTakerAmount,\\n          startedAt,\\n          endedAt,\\n          amplifier\\n        )\\n      )\\n      / BASE;\\n  }\\n}\\n\",\"keccak256\":\"0x70d92ba1fbbf6dea96ad9131f0002fbcd4b063a2e97e69a592f1ce4c48e78fc5\",\"license\":\"agpl-3.0\"},\"contracts/LinearAuction.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\ncontract LinearAuction {\\n  uint256 constant public BASE = 1e18;\\n\\n  function linearPriceDecreasing(\\n    uint256 orderMakerAmount,\\n    uint256 orderTakerAmount,\\n    uint256 thresholdOrderTakerAmount,\\n    uint256 startedAt,\\n    uint256 endedAt\\n  ) public view returns(uint256) {\\n    uint256 maxPricePadded = orderTakerAmount * BASE / orderMakerAmount;\\n    uint256 minPricePadded = thresholdOrderTakerAmount * BASE / orderMakerAmount;\\n\\n    // If not started yet\\n    if (startedAt > block.timestamp) {\\n      return maxPricePadded;\\n    }\\n\\n    // If already finished\\n    if (endedAt < block.timestamp) {\\n      return minPricePadded;\\n    }\\n\\n    uint256 timeElapsed = block.timestamp - startedAt;\\n    uint256 timeMax = endedAt - startedAt;\\n\\n    return maxPricePadded - minPricePadded * timeElapsed / timeMax;\\n  }\\n\\n  function linearPriceIncreasing(\\n    uint256 orderMakerAmount,\\n    uint256 orderTakerAmount,\\n    uint256 thresholdOrderTakerAmount,\\n    uint256 startedAt,\\n    uint256 endedAt\\n  ) public view returns(uint256) {\\n    uint256 maxPricePadded = orderTakerAmount * BASE / orderMakerAmount;\\n    uint256 minPricePadded = thresholdOrderTakerAmount * BASE / orderMakerAmount;\\n\\n    // If not started yet\\n    if (startedAt > block.timestamp) {\\n      return minPricePadded;\\n    }\\n\\n    // If already finished\\n    if (endedAt < block.timestamp) {\\n      return maxPricePadded;\\n    }\\n\\n    uint256 timeElapsed = block.timestamp - startedAt;\\n    uint256 timeMax = endedAt - startedAt;\\n\\n    return (maxPricePadded - minPricePadded) * timeElapsed / timeMax + minPricePadded;\\n  }\\n\\n  function getLinearAuctionMakerAmount(\\n    uint256 orderMakerAmount,\\n    uint256 orderTakerAmount,\\n    uint256 thresholdOrderTakerAmount,\\n    uint256 startedAt,\\n    uint256 endedAt,\\n    bool increasing,\\n    uint256 swapTakerAmount\\n  ) public view returns(uint256) {\\n    return \\n      swapTakerAmount\\n      * BASE\\n      / (\\n        increasing\\n        ? linearPriceIncreasing(\\n          orderMakerAmount,\\n          orderTakerAmount,\\n          thresholdOrderTakerAmount,\\n          startedAt,\\n          endedAt\\n        )\\n        : linearPriceDecreasing(\\n          orderMakerAmount,\\n          orderTakerAmount,\\n          thresholdOrderTakerAmount,\\n          startedAt,\\n          endedAt\\n        )\\n      );\\n  }\\n\\n  function getLinearAuctionTakerAmount(\\n    uint256 orderMakerAmount,\\n    uint256 orderTakerAmount,\\n    uint256 thresholdOrderTakerAmount,\\n    uint256 startedAt,\\n    uint256 endedAt,\\n    bool increasing,\\n    uint256 swapMakerAmount\\n  ) public view returns(uint256) {\\n    return \\n      swapMakerAmount \\n      * (\\n        increasing\\n        ? linearPriceIncreasing(\\n          orderMakerAmount,\\n          orderTakerAmount,\\n          thresholdOrderTakerAmount,\\n          startedAt,\\n          endedAt\\n        )\\n        : linearPriceDecreasing(\\n          orderMakerAmount,\\n          orderTakerAmount,\\n          thresholdOrderTakerAmount,\\n          startedAt,\\n          endedAt\\n        )\\n      )\\n      / BASE;\\n  }\\n}\\n\",\"keccak256\":\"0x0a03c2f132c89987ad6e5cd8f0c87bbdb9ef7f32fcd26ebbe32482e5aa07c17d\",\"license\":\"agpl-3.0\"},\"contracts/OpiumAuctionV2Helper.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"./helpers/NonceManager.sol\\\";\\nimport \\\"./helpers/FeesManager.sol\\\";\\n\\nimport \\\"./ExponentialAuction.sol\\\";\\n\\ncontract OpiumAuctionV2Helper is ExponentialAuction, NonceManager, FeesManager {\\n  constructor(address feesReceiver_) FeesManager(feesReceiver_) {}\\n}\\n\",\"keccak256\":\"0x6ca2e4796021feb7749a825aa6d6df21e553210a0cf37ac8f46ee7da0faca630\",\"license\":\"agpl-3.0\"},\"contracts/helpers/FeesManager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Misc.sol\\\";\\n\\n/// @title A helper contract for managing fees\\ncontract FeesManager is Misc, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 constant public FEE_BASE = 100_000;\\n  uint256 public fee = 10;\\n\\n  address public feesReceiver;\\n\\n  constructor(address feesReceiver_) {\\n    feesReceiver = feesReceiver_;\\n  }\\n\\n  // Auction contract is set as a receiver, thus it handles additional checks, fees and sends the taking amount further to the maker\\n  function notifyFillOrder(\\n    address /* taker */,\\n    address /* makerAsset */,\\n    address takerAsset,\\n    uint256 makingAmount,\\n    uint256 takingAmount,\\n    bytes memory interactiveData\\n  ) external {\\n    // Decode interactive data\\n    (\\n      address maker,\\n      uint256 requiredMakingAmount,\\n      uint256 startedAt\\n    ) = abi.decode(interactiveData, (address, uint256, uint256));\\n\\n    // Check if auction already started\\n    require(timestampAbove(startedAt), \\\"Not started yet\\\");\\n    \\n    // requiredMakingAmount = 0 -> Partial fill allowed\\n    // requiredMakingAmount != 0 -> Only filling of the provided amount allowed\\n    if (requiredMakingAmount != 0 && requiredMakingAmount != makingAmount) {\\n      revert(\\\"Partial fill not allowed\\\");\\n    }\\n\\n    // Calculate auction fees\\n    uint256 fees = takingAmount * fee / FEE_BASE;\\n\\n    // Transfer the amount to maker without fees\\n    IERC20(takerAsset).safeTransfer(maker, takingAmount - fees);\\n\\n    // Transfer the fees if non-zero\\n    if (fees != 0) {\\n      IERC20(takerAsset).safeTransfer(feesReceiver, fees);\\n    }\\n  }\\n\\n  function setFeeReceiver(address feesReceiver_) external onlyOwner {\\n    feesReceiver = feesReceiver_;\\n  }\\n\\n  function setFee(uint256 fee_) external onlyOwner {\\n    fee = fee_;\\n  }\\n}\\n\",\"keccak256\":\"0x1c8a879684e00824baa4f7ab52fb10ae5632484f7e2295cd41c35753c2a35be9\",\"license\":\"agpl-3.0\"},\"contracts/helpers/Misc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ncontract Misc {\\n  function timestampBelow(uint256 time) external view returns(bool) {\\n    return block.timestamp < time;\\n  }\\n\\n  function timestampAbove(uint256 time) public view returns(bool) {\\n    return block.timestamp > time;\\n  }\\n}\\n\",\"keccak256\":\"0x9abdb72460ccdcd565341ea31d1f5dee2adb70d214d4e832c73724b01fec531c\",\"license\":\"MIT\"},\"contracts/helpers/NonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\npragma abicoder v1;\\n\\n/// @title A helper contract for managing nonce of tx sender\\ncontract NonceManager {\\n  event NonceIncreased(address indexed maker, uint256 newNonce);\\n\\n  mapping(address => uint256) public nonce;\\n\\n  /// @notice Advances nonce by one\\n  function increaseNonce() external {\\n    advanceNonce(1);\\n  }\\n\\n  /// @notice Advances nonce by specified amount\\n  function advanceNonce(uint8 amount) public {\\n    uint256 newNonce = nonce[msg.sender] + amount;\\n    nonce[msg.sender] = newNonce;\\n    emit NonceIncreased(msg.sender, newNonce);\\n  }\\n\\n  /// @notice Checks if `makerAddress` has specified `makerNonce`\\n  /// @return Result True if `makerAddress` has specified nonce. Otherwise, false\\n  function nonceEquals(address makerAddress, uint256 makerNonce) external view returns(bool) {\\n    return nonce[makerAddress] == makerNonce;\\n  }\\n}\\n\",\"keccak256\":\"0x47d51f38739c930a07e91bdf5ea9b30766b27f8db70d300b185f061644945920\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600a60025534801561001557600080fd5b5060405161166c38038061166c833981016040819052610034916100b6565b8061003e33610064565b600380546001600160a01b0319166001600160a01b0392909216919091179055506100e6565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156100c857600080fd5b81516001600160a01b03811681146100df57600080fd5b9392505050565b611577806100f56000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063bca93cf5116100de578063ddca3f4311610097578063ecefc70511610071578063ecefc70514610341578063efdcd9741461034b578063f2fde38b1461035e578063fed532121461037157600080fd5b8063ddca3f4314610316578063e71c95181461031f578063ec342ad01461033257600080fd5b8063bca93cf514610295578063bdf854f3146102a8578063c53a0292146102bb578063cf21c775146102c3578063cf6fc6e3146102d6578063d81c542b1461030357600080fd5b806363592c2b1161013057806363592c2b1461020d57806369fe0e2d1461022057806370ae92d214610235578063715018a61461025557806372c244a81461025d5780638da5cb5b1461027057600080fd5b8063220dca52146101785780632863f0861461019e57806340a8c0e7146101c15780634f20a775146101d457806351cd3910146101e7578063601dc934146101fa575b600080fd5b61018b6101863660046110f7565b610384565b6040519081526020015b60405180910390f35b6101b16101ac36600461115f565b421190565b6040519015158152602001610195565b61018b6101cf366004611178565b6103d6565b61018b6101e236600461115f565b610491565b61018b6101f53660046111b3565b610868565b61018b6102083660046110f7565b610928565b6101b161021b36600461115f565b421090565b61023361022e36600461115f565b610962565b005b61018b61024336600461120b565b60006020819052908152604090205481565b61023361096f565b61023361026b366004611228565b610983565b6001546001600160a01b03165b6040516001600160a01b039091168152602001610195565b60035461027d906001600160a01b031681565b61018b6102b636600461124b565b6109f0565b610233610a3e565b6102336102d13660046112c1565b610a48565b6101b16102e43660046113bc565b6001600160a01b03919091166000908152602081905260409020541490565b61018b61031136600461124b565b610b7a565b61018b60025481565b61018b61032d366004611178565b610bb3565b61018b670de0b6b3a764000081565b61018b620186a081565b61023361035936600461120b565b610c52565b61023361036c36600461120b565b610c7c565b61018b61037f3660046111b3565b610cf5565b6000670de0b6b3a7640000846103a7576103a28a8a8a8a8a89610868565b6103b5565b6103b58a8a8a8a8a89610cf5565b6103bf90846113fe565b6103c9919061141d565b9998505050505050505050565b600080866103ec670de0b6b3a7640000886113fe565b6103f6919061141d565b905060008761040d670de0b6b3a7640000886113fe565b610417919061141d565b90504285111561042a5791506104889050565b4284101561043a57509050610488565b6000610446864261143f565b90506000610454878761143f565b9050828183610463838861143f565b61046d91906113fe565b610477919061141d565b6104819190611456565b9450505050505b95945050505050565b670de0b6b3a7640000600f82161561055b5760018216156104d1576a0c097ce7bc90715b34b9f160241b6ec092e04e5bc5ba2d9eaf8f0000000082020490505b60028216156104ff576a0c097ce7bc90715b34b9f160241b6ec08df2413e52bce616c26f1000000082020490505b600482161561052d576a0c097ce7bc90715b34b9f160241b6ec0841687ef88da0e0219c93f10000082020490505b600882161561055b576a0c097ce7bc90715b34b9f160241b6ec0706098eb3d8dad71e6823e86df1082020490505b60f082161561061c576010821615610592576a0c097ce7bc90715b34b9f160241b6ec048fac88e9b7584c4f0fa400171b082020490505b60208216156105c0576a0c097ce7bc90715b34b9f160241b6ebffa4758bcda710d9e528a11c6715082020490505b60408216156105ee576a0c097ce7bc90715b34b9f160241b6ebf5d410e86adaaf35db80d1d605b6c82020490505b608082161561061c576a0c097ce7bc90715b34b9f160241b6ebe24b55f652e45e1ebc842913ab9c382020490505b610f008216156106e257610100821615610655576a0c097ce7bc90715b34b9f160241b6ebbb996249761db2c87848c7687f8d182020490505b610200821615610684576a0c097ce7bc90715b34b9f160241b6eb6faddc63206c463991fde8fdc950682020490505b6104008216156106b3576a0c097ce7bc90715b34b9f160241b6eadd8c2cb1adc56015d8ac13e949ad682020490505b6108008216156106e2576a0c097ce7bc90715b34b9f160241b6e9cecd60ec709883c1df984ed528def82020490505b61f0008216156107a85761100082161561071b576a0c097ce7bc90715b34b9f160241b6e7fdce769ba4042c58df22b634da52d82020490505b61200082161561074a576a0c097ce7bc90715b34b9f160241b6e54e372216d9b621162728539f1abfe82020490505b614000821615610779576a0c097ce7bc90715b34b9f160241b6e256a7bfb81e938b516478ae184de7e82020490505b6180008216156107a8576a0c097ce7bc90715b34b9f160241b6e0744db899706cd40ba8762a820f40982020490505b620f000082161561086357620100008216156107e2576a0c097ce7bc90715b34b9f160241b6d463bd697e97c414af51c38344bac82020490505b62020000821615610810576a0c097ce7bc90715b34b9f160241b6c199cc99af8ae745a2741b20f0782020490505b6204000082161561083c576a0c097ce7bc90715b34b9f160241b6a0367f86fa912ef7733a1c682020490505b62080000821615610863576a0c097ce7bc90715b34b9f160241b650f6bdf3552b282020490505b919050565b6000808761087e670de0b6b3a7640000896113fe565b610888919061141d565b905060008861089f670de0b6b3a7640000896113fe565b6108a9919061141d565b9050428611156108bb5750905061091e565b428510156108cc57915061091e9050565b60006108d8874261143f565b90506000670de0b6b3a76400006108f26101e288856113fe565b6108fc90866113fe565b610906919061141d565b90508281116109155782610917565b805b9450505050505b9695505050505050565b6000836109425761093d898989898988610868565b610950565b610950898989898988610cf5565b6103bf670de0b6b3a7640000846113fe565b61096a610d91565b600255565b610977610d91565b6109816000610deb565b565b336000908152602081905260408120546109a19060ff841690611456565b33600081815260208181526040918290208490558151848152915193945091927ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db929181900390910190a25050565b600082610a0957610a048888888888610bb3565b610a16565b610a1688888888886103d6565b610a28670de0b6b3a7640000846113fe565b610a32919061141d565b98975050505050505050565b6109816001610983565b600080600083806020019051810190610a61919061146e565b925092509250610a7081421190565b610ab35760405162461bcd60e51b815260206004820152600f60248201526e139bdd081cdd185c9d1959081e595d608a1b60448201526064015b60405180910390fd5b8115801590610ac25750858214155b15610b0f5760405162461bcd60e51b815260206004820152601860248201527f5061727469616c2066696c6c206e6f7420616c6c6f77656400000000000000006044820152606401610aaa565b6000620186a060025487610b2391906113fe565b610b2d919061141d565b9050610b4e84610b3d838961143f565b6001600160a01b038b169190610e3d565b8015610b6e57600354610b6e906001600160a01b038a8116911683610e3d565b50505050505050505050565b6000670de0b6b3a764000083610b9c57610b978989898989610bb3565b610ba9565b610ba989898989896103d6565b610a2890846113fe565b60008086610bc9670de0b6b3a7640000886113fe565b610bd3919061141d565b9050600087610bea670de0b6b3a7640000886113fe565b610bf4919061141d565b905042851115610c0657509050610488565b42841015610c175791506104889050565b6000610c23864261143f565b90506000610c31878761143f565b905080610c3e83856113fe565b610c48919061141d565b610481908561143f565b610c5a610d91565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610c84610d91565b6001600160a01b038116610ce95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610aaa565b610cf281610deb565b50565b60008087610d0b670de0b6b3a7640000896113fe565b610d15919061141d565b9050600088610d2c670de0b6b3a7640000896113fe565b610d36919061141d565b905042861115610d4957915061091e9050565b42851015610d595750905061091e565b6000610d65874261143f565b90506000670de0b6b3a7640000610d7f6101e288856113fe565b6108f290670de0b6b3a764000061143f565b6001546001600160a01b031633146109815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aaa565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e8f908490610e94565b505050565b6000610ee9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f669092919063ffffffff16565b805190915015610e8f5780806020019051810190610f0791906114a5565b610e8f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aaa565b6060610f758484600085610f7f565b90505b9392505050565b606082471015610fe05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610aaa565b6001600160a01b0385163b6110375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aaa565b600080866001600160a01b0316858760405161105391906114f2565b60006040518083038185875af1925050503d8060008114611090576040519150601f19603f3d011682016040523d82523d6000602084013e611095565b606091505b50915091506110a58282866110b0565b979650505050505050565b606083156110bf575081610f78565b8251156110cf5782518084602001fd5b8160405162461bcd60e51b8152600401610aaa919061150e565b8015158114610cf257600080fd5b600080600080600080600080610100898b03121561111457600080fd5b883597506020890135965060408901359550606089013594506080890135935060a0890135611142816110e9565b979a969950949793969295929450505060c08201359160e0013590565b60006020828403121561117157600080fd5b5035919050565b600080600080600060a0868803121561119057600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060c087890312156111cc57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6001600160a01b0381168114610cf257600080fd5b60006020828403121561121d57600080fd5b8135610f78816111f6565b60006020828403121561123a57600080fd5b813560ff81168114610f7857600080fd5b600080600080600080600060e0888a03121561126657600080fd5b873596506020880135955060408801359450606088013593506080880135925060a0880135611294816110e9565b8092505060c0880135905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c087890312156112da57600080fd5b86356112e5816111f6565b955060208701356112f5816111f6565b94506040870135611305816111f6565b9350606087013592506080870135915060a087013567ffffffffffffffff8082111561133057600080fd5b818901915089601f83011261134457600080fd5b813581811115611356576113566112ab565b604051601f8201601f19908116603f0116810190838211818310171561137e5761137e6112ab565b816040528281528c602084870101111561139757600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b600080604083850312156113cf57600080fd5b82356113da816111f6565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611418576114186113e8565b500290565b60008261143a57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611451576114516113e8565b500390565b60008219821115611469576114696113e8565b500190565b60008060006060848603121561148357600080fd5b835161148e816111f6565b602085015160409095015190969495509392505050565b6000602082840312156114b757600080fd5b8151610f78816110e9565b60005b838110156114dd5781810151838201526020016114c5565b838111156114ec576000848401525b50505050565b600082516115048184602087016114c2565b9190910192915050565b602081526000825180602084015261152d8160408501602087016114c2565b601f01601f1916919091016040019291505056fea26469706673582212200891e4f1c69f8a85f05990c2a6b8f40a7264ad32ae8084a3840e9f9d62fc8e4e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063bca93cf5116100de578063ddca3f4311610097578063ecefc70511610071578063ecefc70514610341578063efdcd9741461034b578063f2fde38b1461035e578063fed532121461037157600080fd5b8063ddca3f4314610316578063e71c95181461031f578063ec342ad01461033257600080fd5b8063bca93cf514610295578063bdf854f3146102a8578063c53a0292146102bb578063cf21c775146102c3578063cf6fc6e3146102d6578063d81c542b1461030357600080fd5b806363592c2b1161013057806363592c2b1461020d57806369fe0e2d1461022057806370ae92d214610235578063715018a61461025557806372c244a81461025d5780638da5cb5b1461027057600080fd5b8063220dca52146101785780632863f0861461019e57806340a8c0e7146101c15780634f20a775146101d457806351cd3910146101e7578063601dc934146101fa575b600080fd5b61018b6101863660046110f7565b610384565b6040519081526020015b60405180910390f35b6101b16101ac36600461115f565b421190565b6040519015158152602001610195565b61018b6101cf366004611178565b6103d6565b61018b6101e236600461115f565b610491565b61018b6101f53660046111b3565b610868565b61018b6102083660046110f7565b610928565b6101b161021b36600461115f565b421090565b61023361022e36600461115f565b610962565b005b61018b61024336600461120b565b60006020819052908152604090205481565b61023361096f565b61023361026b366004611228565b610983565b6001546001600160a01b03165b6040516001600160a01b039091168152602001610195565b60035461027d906001600160a01b031681565b61018b6102b636600461124b565b6109f0565b610233610a3e565b6102336102d13660046112c1565b610a48565b6101b16102e43660046113bc565b6001600160a01b03919091166000908152602081905260409020541490565b61018b61031136600461124b565b610b7a565b61018b60025481565b61018b61032d366004611178565b610bb3565b61018b670de0b6b3a764000081565b61018b620186a081565b61023361035936600461120b565b610c52565b61023361036c36600461120b565b610c7c565b61018b61037f3660046111b3565b610cf5565b6000670de0b6b3a7640000846103a7576103a28a8a8a8a8a89610868565b6103b5565b6103b58a8a8a8a8a89610cf5565b6103bf90846113fe565b6103c9919061141d565b9998505050505050505050565b600080866103ec670de0b6b3a7640000886113fe565b6103f6919061141d565b905060008761040d670de0b6b3a7640000886113fe565b610417919061141d565b90504285111561042a5791506104889050565b4284101561043a57509050610488565b6000610446864261143f565b90506000610454878761143f565b9050828183610463838861143f565b61046d91906113fe565b610477919061141d565b6104819190611456565b9450505050505b95945050505050565b670de0b6b3a7640000600f82161561055b5760018216156104d1576a0c097ce7bc90715b34b9f160241b6ec092e04e5bc5ba2d9eaf8f0000000082020490505b60028216156104ff576a0c097ce7bc90715b34b9f160241b6ec08df2413e52bce616c26f1000000082020490505b600482161561052d576a0c097ce7bc90715b34b9f160241b6ec0841687ef88da0e0219c93f10000082020490505b600882161561055b576a0c097ce7bc90715b34b9f160241b6ec0706098eb3d8dad71e6823e86df1082020490505b60f082161561061c576010821615610592576a0c097ce7bc90715b34b9f160241b6ec048fac88e9b7584c4f0fa400171b082020490505b60208216156105c0576a0c097ce7bc90715b34b9f160241b6ebffa4758bcda710d9e528a11c6715082020490505b60408216156105ee576a0c097ce7bc90715b34b9f160241b6ebf5d410e86adaaf35db80d1d605b6c82020490505b608082161561061c576a0c097ce7bc90715b34b9f160241b6ebe24b55f652e45e1ebc842913ab9c382020490505b610f008216156106e257610100821615610655576a0c097ce7bc90715b34b9f160241b6ebbb996249761db2c87848c7687f8d182020490505b610200821615610684576a0c097ce7bc90715b34b9f160241b6eb6faddc63206c463991fde8fdc950682020490505b6104008216156106b3576a0c097ce7bc90715b34b9f160241b6eadd8c2cb1adc56015d8ac13e949ad682020490505b6108008216156106e2576a0c097ce7bc90715b34b9f160241b6e9cecd60ec709883c1df984ed528def82020490505b61f0008216156107a85761100082161561071b576a0c097ce7bc90715b34b9f160241b6e7fdce769ba4042c58df22b634da52d82020490505b61200082161561074a576a0c097ce7bc90715b34b9f160241b6e54e372216d9b621162728539f1abfe82020490505b614000821615610779576a0c097ce7bc90715b34b9f160241b6e256a7bfb81e938b516478ae184de7e82020490505b6180008216156107a8576a0c097ce7bc90715b34b9f160241b6e0744db899706cd40ba8762a820f40982020490505b620f000082161561086357620100008216156107e2576a0c097ce7bc90715b34b9f160241b6d463bd697e97c414af51c38344bac82020490505b62020000821615610810576a0c097ce7bc90715b34b9f160241b6c199cc99af8ae745a2741b20f0782020490505b6204000082161561083c576a0c097ce7bc90715b34b9f160241b6a0367f86fa912ef7733a1c682020490505b62080000821615610863576a0c097ce7bc90715b34b9f160241b650f6bdf3552b282020490505b919050565b6000808761087e670de0b6b3a7640000896113fe565b610888919061141d565b905060008861089f670de0b6b3a7640000896113fe565b6108a9919061141d565b9050428611156108bb5750905061091e565b428510156108cc57915061091e9050565b60006108d8874261143f565b90506000670de0b6b3a76400006108f26101e288856113fe565b6108fc90866113fe565b610906919061141d565b90508281116109155782610917565b805b9450505050505b9695505050505050565b6000836109425761093d898989898988610868565b610950565b610950898989898988610cf5565b6103bf670de0b6b3a7640000846113fe565b61096a610d91565b600255565b610977610d91565b6109816000610deb565b565b336000908152602081905260408120546109a19060ff841690611456565b33600081815260208181526040918290208490558151848152915193945091927ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db929181900390910190a25050565b600082610a0957610a048888888888610bb3565b610a16565b610a1688888888886103d6565b610a28670de0b6b3a7640000846113fe565b610a32919061141d565b98975050505050505050565b6109816001610983565b600080600083806020019051810190610a61919061146e565b925092509250610a7081421190565b610ab35760405162461bcd60e51b815260206004820152600f60248201526e139bdd081cdd185c9d1959081e595d608a1b60448201526064015b60405180910390fd5b8115801590610ac25750858214155b15610b0f5760405162461bcd60e51b815260206004820152601860248201527f5061727469616c2066696c6c206e6f7420616c6c6f77656400000000000000006044820152606401610aaa565b6000620186a060025487610b2391906113fe565b610b2d919061141d565b9050610b4e84610b3d838961143f565b6001600160a01b038b169190610e3d565b8015610b6e57600354610b6e906001600160a01b038a8116911683610e3d565b50505050505050505050565b6000670de0b6b3a764000083610b9c57610b978989898989610bb3565b610ba9565b610ba989898989896103d6565b610a2890846113fe565b60008086610bc9670de0b6b3a7640000886113fe565b610bd3919061141d565b9050600087610bea670de0b6b3a7640000886113fe565b610bf4919061141d565b905042851115610c0657509050610488565b42841015610c175791506104889050565b6000610c23864261143f565b90506000610c31878761143f565b905080610c3e83856113fe565b610c48919061141d565b610481908561143f565b610c5a610d91565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610c84610d91565b6001600160a01b038116610ce95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610aaa565b610cf281610deb565b50565b60008087610d0b670de0b6b3a7640000896113fe565b610d15919061141d565b9050600088610d2c670de0b6b3a7640000896113fe565b610d36919061141d565b905042861115610d4957915061091e9050565b42851015610d595750905061091e565b6000610d65874261143f565b90506000670de0b6b3a7640000610d7f6101e288856113fe565b6108f290670de0b6b3a764000061143f565b6001546001600160a01b031633146109815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610aaa565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e8f908490610e94565b505050565b6000610ee9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f669092919063ffffffff16565b805190915015610e8f5780806020019051810190610f0791906114a5565b610e8f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610aaa565b6060610f758484600085610f7f565b90505b9392505050565b606082471015610fe05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610aaa565b6001600160a01b0385163b6110375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aaa565b600080866001600160a01b0316858760405161105391906114f2565b60006040518083038185875af1925050503d8060008114611090576040519150601f19603f3d011682016040523d82523d6000602084013e611095565b606091505b50915091506110a58282866110b0565b979650505050505050565b606083156110bf575081610f78565b8251156110cf5782518084602001fd5b8160405162461bcd60e51b8152600401610aaa919061150e565b8015158114610cf257600080fd5b600080600080600080600080610100898b03121561111457600080fd5b883597506020890135965060408901359550606089013594506080890135935060a0890135611142816110e9565b979a969950949793969295929450505060c08201359160e0013590565b60006020828403121561117157600080fd5b5035919050565b600080600080600060a0868803121561119057600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060c087890312156111cc57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6001600160a01b0381168114610cf257600080fd5b60006020828403121561121d57600080fd5b8135610f78816111f6565b60006020828403121561123a57600080fd5b813560ff81168114610f7857600080fd5b600080600080600080600060e0888a03121561126657600080fd5b873596506020880135955060408801359450606088013593506080880135925060a0880135611294816110e9565b8092505060c0880135905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c087890312156112da57600080fd5b86356112e5816111f6565b955060208701356112f5816111f6565b94506040870135611305816111f6565b9350606087013592506080870135915060a087013567ffffffffffffffff8082111561133057600080fd5b818901915089601f83011261134457600080fd5b813581811115611356576113566112ab565b604051601f8201601f19908116603f0116810190838211818310171561137e5761137e6112ab565b816040528281528c602084870101111561139757600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b600080604083850312156113cf57600080fd5b82356113da816111f6565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611418576114186113e8565b500290565b60008261143a57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611451576114516113e8565b500390565b60008219821115611469576114696113e8565b500190565b60008060006060848603121561148357600080fd5b835161148e816111f6565b602085015160409095015190969495509392505050565b6000602082840312156114b757600080fd5b8151610f78816110e9565b60005b838110156114dd5781810151838201526020016114c5565b838111156114ec576000848401525b50505050565b600082516115048184602087016114c2565b9190910192915050565b602081526000825180602084015261152d8160408501602087016114c2565b601f01601f1916919091016040019291505056fea26469706673582212200891e4f1c69f8a85f05990c2a6b8f40a7264ad32ae8084a3840e9f9d62fc8e4e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "nonceEquals(address,uint256)": {
        "returns": {
          "_0": "Result True if `makerAddress` has specified nonce. Otherwise, false"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "advanceNonce(uint8)": {
        "notice": "Advances nonce by specified amount"
      },
      "increaseNonce()": {
        "notice": "Advances nonce by one"
      },
      "nonceEquals(address,uint256)": {
        "notice": "Checks if `makerAddress` has specified `makerNonce`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3068,
        "contract": "contracts/OpiumAuctionV2Helper.sol:OpiumAuctionV2Helper",
        "label": "nonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/OpiumAuctionV2Helper.sol:OpiumAuctionV2Helper",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2903,
        "contract": "contracts/OpiumAuctionV2Helper.sol:OpiumAuctionV2Helper",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2905,
        "contract": "contracts/OpiumAuctionV2Helper.sol:OpiumAuctionV2Helper",
        "label": "feesReceiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}